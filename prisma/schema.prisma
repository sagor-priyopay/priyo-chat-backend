// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  username   String   @unique
  password   String
  avatar     String?
  role       String   @default("CUSTOMER")
  isOnline   Boolean  @default(false)
  lastSeen   DateTime @default(now())
  priyoPayId String?  @unique
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  sentMessages       Message[]           @relation("MessageSender")
  conversations      ConversationUser[]
  refreshTokens      RefreshToken[]
  messageReads       MessageRead[]
  typingIndicators   TypingIndicator[]
  assignedConversations Conversation[]   @relation("AssignedConversations")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Conversation {
  id         String            @id @default(cuid())
  name       String?
  type       String           @default("DIRECT")
  status     String           @default("OPEN")
  priority   String           @default("MEDIUM")
  assignedTo String?
  isActive   Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  participants ConversationUser[]
  messages     Message[]
  typingUsers  TypingIndicator[]
  assignedAgent User?           @relation("AssignedConversations", fields: [assignedTo], references: [id])

  @@map("conversations")
}

model ConversationUser {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime @default(now())
  leftAt         DateTime?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_users")
}

model Message {
  id             String      @id @default(cuid())
  content        String
  type           String      @default("TEXT")
  fileUrl        String?
  fileName       String?
  fileSize       Int?
  conversationId String
  senderId       String
  metadata       String?     // JSON string for channel-specific data
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  conversation Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  reads        MessageRead[]

  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reads")
}

model TypingIndicator {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  startedAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("typing_indicators")
}

// Note: SQLite doesn't support enums, so we use string constants
// Valid UserRole values: "ADMIN", "AGENT", "CUSTOMER"
// Valid ConversationType values: "DIRECT", "GROUP"  
// Valid MessageType values: "TEXT", "FILE", "IMAGE"
// Valid ConversationStatus values: "OPEN", "PENDING", "RESOLVED", "CLOSED"
// Valid ConversationPriority values: "LOW", "MEDIUM", "HIGH", "URGENT"
